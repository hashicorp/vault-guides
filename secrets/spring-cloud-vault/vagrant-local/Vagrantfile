$base = <<BASE
#Packages
sudo wget -q http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
sudo yum install -y epel-release
sudo yum install -y jq unzip docker postgresql apache-maven
#Docker
sudo groupadd docker
sudo usermod -aG docker vagrant
sudo systemctl enable docker.service
sudo service docker start
BASE

$spring = <<SPRING
cd /vagrant
mvn package
docker build --build-arg JAR_FILE=target/spring-vault-demo-1.0.jar -t spring .
SPRING

$postgres = <<POSTGRES
sleep 10
psql -h localhost -U postgres -d postgres -c 'DROP TABLE IF EXISTS "orders"'
psql -h localhost -U postgres -d postgres -a -f /vagrant/scripts/postgres.sql
POSTGRES

$vault_install = <<VAULT_INSTALL
#Get Vault
VAULT=1.3.1
VAULT_ZIP=/vagrant/bin/vault_${VAULT}_linux_amd64.zip
if [ ! -f $VAULT_ZIP ]; then
  mkdir -p /vagrant/bin
  wget https://releases.hashicorp.com/vault/${VAULT}/vault_${VAULT}_linux_amd64.zip --quiet -O $VAULT_ZIP
fi
cd /tmp
unzip -q $VAULT_ZIP >/dev/null
sudo chmod +x vault
sudo mv vault /usr/bin
sudo chmod 0755 /usr/bin/vault
sudo chown root:root /usr/bin/vault
#Policy permissions
chmod +x /vagrant/scripts/vault.sh
VAULT_INSTALL

$vault_policy = <<VAULT_POLICY
#Create Policy
export VAULT_ADDR=http://127.0.0.1:8200
vault login root
/vagrant/scripts/vault.sh
vault write secret/spring-vault-demo secret=hello-vault
VAULT_POLICY

Vagrant.configure("2") do |config|
  config.vm.synced_folder "../", "/vagrant"
  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", "2048"]
    vb.customize ["modifyvm", :id, "--cpus", "1"]
  end
  config.vm.define "demo" do |demo|
    demo.vm.box = "bento/centos-7.7"
    demo.vm.hostname = "demo.example.com"
    demo.vm.network :private_network, type: "dhcp"
    demo.vm.network :private_network, ip: "192.168.50.151"
    demo.vm.network :forwarded_port, guest: 8200, host: 8200
    demo.vm.network :forwarded_port, guest: 8080, host: 8080
    demo.vm.network :forwarded_port, guest: 5432, host: 5432
    demo.vm.provision "shell", inline: $base
    demo.vm.provision "shell", inline: $spring
    demo.vm.provision "shell", inline: $vault_install
    demo.vm.provision "docker" do |d|
      d.run "postgres",
        args: "--net=host -d -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=p@sSw0rd_ -e PGPASSWORD=p@sSw0rd_"
      d.run "vault",
        image: "vault:latest",
        args: "--net=host --cap-add=IPC_LOCK -e 'VAULT_DEV_ROOT_TOKEN_ID=root' -e 'VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200' -d"
      d.run "spring",
        args: "--net=host -v /vagrant/bootstrap.yaml:/bootstrap.yaml -e 'VAULT_TOKEN=root' -d"
    end
    demo.vm.provision "shell", inline: "sudo docker restart postgres vault spring", run: "always"
    demo.vm.provision "shell", inline: $postgres, run: "always"
    demo.vm.provision "shell", inline: $vault_policy, run: "always"
  end
end
